- hosts: localhost
  connection: local
  become: yes

  pre_tasks:
    - name: Load environment variables from .env file
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/.env"
        name: env_vars
      become: false
      
    - name: Set Git variables
      ansible.builtin.set_fact:
        git_user_name: "{{ env_vars.GIT_USER_NAME }}"
        git_user_email: "{{ env_vars.GIT_USER_EMAIL }}"
        git_enki_name: "{{ env_vars.GIT_ENKI_NAME }}"
        git_enki_email: "{{ env_vars.GIT_ENKI_EMAIL }}"
      become: false

    - name: Update apt cache (for Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      changed_when: false
      when: ansible_os_family == "Debian"

  roles:
    # Roles will be defined here
    # Example:
    # - common
    # - webserver

  tasks:
    - name: Print a message
      ansible.builtin.debug:
        msg: "Development environment setup started!"

    - name: Set user home directory
      ansible.builtin.set_fact:
        user_home: "{{ lookup('env', 'HOME') }}"

    - name: Install essential and additional development tools
      ansible.builtin.apt:
        name:
          - build-essential
          - ripgrep
          - unzip
          - zsh
          - eza
          - git
          - curl
          - python3-pip
          - python3-venv
        state: present
      when: ansible_os_family == "Debian"

    - name: Install uv
      ansible.builtin.shell:
        cmd: curl -LsSf https://astral.sh/uv/install.sh | sh
        creates: "{{ user_home }}/.local/bin/uv"
      changed_when: true
      become: false

    - name: Install direnv
      ansible.builtin.shell:
        cmd: curl -sfL https://direnv.net/install.sh | bash
        creates: "{{ user_home }}/.local/bin/direnv"
      changed_when: true
      become: false

    - name: Set Neovim installation variables
      ansible.builtin.set_fact:
        nvim_appimage_url: "https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.appimage"
        nvim_appimage_temp_path: "/tmp/nvim-linux-x86_64.appimage"
        nvim_install_dir: "/opt/nvim"
        nvim_executable_path: "/opt/nvim/nvim"
        cacheable: yes

    - name: Check if Neovim is already installed
      ansible.builtin.stat:
        path: "{{ nvim_executable_path }}"
      register: nvim_installed_stat

    - name: Install Neovim AppImage
      become: yes
      block:
        - name: Download Neovim AppImage
          ansible.builtin.get_url:
            url: "{{ nvim_appimage_url }}"
            dest: "{{ nvim_appimage_temp_path }}"
            mode: '0644'
          become: false
          register: nvim_download_result

        - name: Ensure Neovim installation directory {{ nvim_install_dir }} exists
          ansible.builtin.file:
            path: "{{ nvim_install_dir }}"
            state: directory
            mode: '0755'
            owner: root
            group: root

        - name: Move Neovim AppImage to {{ nvim_executable_path }} and set permissions
          ansible.builtin.copy:
            src: "{{ nvim_appimage_temp_path }}"
            dest: "{{ nvim_executable_path }}"
            remote_src: yes
            mode: '0755'
            owner: root
            group: root

      when: not nvim_installed_stat.stat.exists

    - name: Clean up downloaded Neovim AppImage
      ansible.builtin.file:
        path: "{{ nvim_appimage_temp_path }}"
        state: absent
      when: nvim_download_result is defined and nvim_download_result.changed

    - name: Install Starship prompt
      ansible.builtin.shell:
        cmd: curl -sS https://starship.rs/install.sh | sh -s -- --yes
        creates: /usr/local/bin/starship
      changed_when: true

    - name: Install NVM (Node Version Manager)
      ansible.builtin.shell:
        cmd: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
        creates: "{{ user_home }}/.nvm/nvm.sh"
      changed_when: true
      become: false

    - name: Install latest LTS Node.js using NVM and set as default
      ansible.builtin.shell:
        cmd: bash -c "source {{ user_home }}/.nvm/nvm.sh && nvm install --lts && nvm alias default lts/*"
        creates: "{{ user_home }}/.nvm/alias/default"
      changed_when: true
      become: false
      
    - name: Install JetBrains Mono Nerd Font (v3.4.0)
      become: false
      block:
        - name: Define font paths and URL
          ansible.builtin.set_fact:
            font_download_url: "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/JetBrainsMono.zip"
            user_font_dir: "{{ user_home }}/.local/share/fonts"
            font_install_dir: "{{ user_home }}/.local/share/fonts/NerdFontsJetBrainsMono"
            font_zip_temp_path: "/tmp/JetBrainsMono_v3.4.0.zip"
            cacheable: yes

        - name: Ensure user font base directory exists
          ansible.builtin.file:
            path: "{{ user_font_dir }}"
            state: directory
            mode: '0755'

        - name: Ensure specific font installation directory exists
          ansible.builtin.file:
            path: "{{ font_install_dir }}"
            state: directory
            mode: '0755'

        - name: Check if font installation directory is populated
          ansible.builtin.find:
            paths: "{{ font_install_dir }}"
            file_type: file
          register: font_install_dir_contents

        - name: Download JetBrains Mono Nerd Font zip (v3.4.0)
          ansible.builtin.get_url:
            url: "{{ font_download_url }}"
            dest: "{{ font_zip_temp_path }}"
            mode: '0644'
          when: font_install_dir_contents.matched == 0
          register: font_download_result

        - name: Unarchive JetBrains Mono Nerd Font
          ansible.builtin.unarchive:
            src: "{{ font_zip_temp_path }}"
            dest: "{{ font_install_dir }}"
            remote_src: yes
          when: font_install_dir_contents.matched == 0
          register: font_unarchive_result

        - name: Clean up downloaded font zip file
          ansible.builtin.file:
            path: "{{ font_zip_temp_path }}"
            state: absent
          when: font_download_result.changed

        - name: Update font cache if fonts were newly installed
          ansible.builtin.command:
            cmd: fc-cache -fv
          when: font_unarchive_result.changed
          changed_when: true

      tags:
        - fonts
        - nerdfonts
        - jetbrainsmono

    - name: Ensure workspace directory exists
      ansible.builtin.file:
        path: "{{ user_home }}/workspace"
        state: directory
        mode: '0755'
      become: false

    - name: Ensure .ssh directory exists
      ansible.builtin.file:
        path: "{{ user_home }}/.ssh"
        state: directory
        mode: '0700'
      become: false

    - name: Create .gitconfig from template
      ansible.builtin.template:
        src: templates/gitconfig.j2
        dest: "{{ user_home }}/.gitconfig"
        mode: '0644'
      become: false

    - name: Create .gitconfig-enki from template
      ansible.builtin.template:
        src: templates/gitconfig-enki.j2
        dest: "{{ user_home }}/.gitconfig-enki"
        mode: '0644'
      become: false

    - name: Symlink .ssh/config
      ansible.builtin.file:
        src: "{{ playbook_dir }}/dotfiles/.ssh/config"
        dest: "{{ user_home }}/.ssh/config"
        state: link
        force: true
        follow: false
      become: false

    - name: Ensure .zsh directory exists
      ansible.builtin.file:
        path: "{{ user_home }}/.zsh"
        state: directory
        mode: '0755'
      become: false

    - name: Install zsh-autosuggestions
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-autosuggestions.git
        dest: "{{ user_home }}/.zsh/zsh-autosuggestions"
        version: master
      become: false

    - name: Symlink .zshrc
      ansible.builtin.file:
        src: "{{ playbook_dir }}/dotfiles/.zshrc"
        dest: "{{ user_home }}/.zshrc"
        state: link
        force: true
        follow: false
      become: false

    - name: Change default shell to zsh
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        shell: /usr/bin/zsh
      become: yes
